print("Hellow World!")
vtr1 = c(TRUE,FALSE)
class(vtr1)
vtr2=c(13,23,13.23,23.13)
vtr1 = c(TRUE,FALSE)
vtr2=c(13,23,13.23,23.13)
class(vtr1)
class(vtr2)
vr=tr2
vtr2
vtr1
Vtr3
Vtr3=c(13L,23L)
Vtr3
Vtr4=c(TRUE,23,13,13.23)
Vtr4
Vtr5=c("Hello",FALSE,23,13.23)
Vtr5
mtr=matrix(c(5:30),5,5)
mtr=matrix(c(5:29),5,5)
mtr
arr1=array(c(0:15),dim=c(4,4,2,2))
arr1
arr2=array(c(1:9), dim=c(3,3,4,2))
arr2
vtr6=c(23,13)
vtr7=c("Hellow","World")
mylist=list(vtr6,vtr7)
mylist
vtr8=c(1:5)
vtr9=c("Sri","Sai","Usher","Ram","Shiva")
vtr10=c(13,13.1,13.2)
data.frame(vtr8,vtr9,vtr10)
vtr8=c(1:5)
vtr9=c("Sri","Sai","Usher","Ram","Shiva")
vtr10=c(13,13.1,13.2,13.3,13.4)
data.frame(vtr8,vtr9,vtr10)
vtr8=c(1:5)
vtr9=c("Sri","Sai","Usher","Ram","Shiva")
vtr10=c(13,13.1,13.2,13.3,13.4)
df1=data.frame(vtr8,vtr9,vtr10)
df1
data.frame(airquality)
print(8+5)
print (8%%5)
print (2^5)
#Floor Division
print(22%/%7)
print(3.9%/%2)
var1 =13
var2 =23
print (var1==var2)
x=5
x
20=y
20 = y
y=20
y
25=y
vector1&vector2
vector1 =c(TRUE,FALSE,TRUE,FALSE)
vector2=c(TRUE,TRUE,FALSE,FALSE)
vector1&vector2
print(vector1&vector2)
print(vector1|vector2)
#Floor Division
print(22%/%7)
print(vector1&&vector2)
print(!vector1)
a1=23
a2=24
if((a1+a2)>50)
{
print("value is greater than 50")
}
if((a1+a2)>50)
{
print("value is greater than 50")
}
else if ((a1+a2)>25)
{
print("value is greater than 25")
}
else
{
print ("value is less than 25")
}
x <- 0
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
if(a1+a2>50){
print("value is greater than 50")
} else if (a1+a2>25){
print("value is greater than 25")
} else
{
print ("value is less than 25")
}
a1=23
a2=27
if(a1+a2>50){
print("value is greater than 50")
} else if (a1+a2>25){
print("value is greater than 25")
} else
{
print ("value is less than 25")
}
a1=23
a2=32
if(a1+a2>50){
print("value is greater than 50")
} else if (a1+a2>25){
print("value is greater than 25")
} else
{
print ("value is less than 25")
}
switch(a1==a2,
TRUE= print("True"),
FALSE=print("False")
)
print(a1==a2)
switch(a1==a2,
'TRUE'=print("True"),
'FALSE'=print("False")
)
switch((a1==a2),
'TRUE'=print("True"),
'FALSE'=print("False")
)
switch((a1==a2),
TRUE=print("True"),
FALSE=print("False")
)
switch(a1==a2,
TRUE=print("True"),
FALSE=print("False"),
print("invalid input")
)
switch(a1==a2,
TRUE=print("True"),
FALSE=print("False"),
print("invalid input")
)
switch(a1==a2,
TRUE=print("True"),
FALSE=print("False"),
print("invalid input")
)
switch(a1==a2,
'TRUE'=print("True"),
'FALSE'=print("False"),
print("invalid input")
)
switch(a1,
'23'=print("True"),
'24'=print("False"),
print("invalid input")
)
switch(23,
'23'=print("True"),
'24'=print("False"),
print("invalid input")
)
switch(23,
'23' =print("True"),
'24' =print("False"),
print("invalid input")
)
switch(2,"red","green","blue")
switch(2, 1="red",2="green",3="blue")
switch(2, '1'="red",'2'="green",'3'="blue")
switch(23,
'23' =23,
'24' =24,
print("invalid input")
)
switch(23,
'23' ="red",
'24' ="green",
print("invalid input")
)
switch(23,
'23' ="red",
'24' ="green",
print("invalid input")
)
switch(23,
'23' ="red",
'24' ="green",
print("invalid input")
)
switch(23,
'23' ="red",
'24' ="green",
)
switch(23,
'23' ="red",
'24' ="green",
)
switch(23,
'1' ="red",
'2' ="green",
)
switch(1,
'1' ="red",
'2' ="green",
)
switch(2,"red","green","blue")
x=5
repeat{
print(x)
x=x+2
if(x>21)
{break}
}
x=5
while(x<21)
{
print(x)
x=x+2
}
for (x in 1:25)
{
print(x)
}
str1 ="Hey Jude!"
print(str1)
str2='Hey Jude!'
print(str2)
str3=paste(str1,str2)
str3
str1 ="Hey Jude!"
print(str1)
str2='Hey Dude!'
print(str2)
str3=paste(str1,str2)
print(str3)
nchar(str3)
str4<-toupper(str3)
print(str4)
str5<-tolower(str3)
print(str5)
str6 <- substr(5,16)
print(str6)
str6 <- substr(str3,5,16)
print(str6)
str6 <- substr(str3,5,1)
print(str6)
str6 <- substr(str3,5,5)
print(str6)
str6 <- substr(str3,5,6)
print(str6)
x <- "1234567890"
substr(x, 5, 7)
substr(x, 4, 4) <- "A"
print(x)
substr(x, 4, 4) <- "AAA"
print(x)
substr(x, 4, 4) <- "AAA"
print(x)
substr(x, 4, 6) <- "AAA"
print(x)
substr(x, 4, 5) <- "AAA"
print(x)
x <- "1234567890"
substr(x, 4, 5) <- "AAA"
print(x)
fibo <- function(a)
{
var1=0;
var2=1;
print (var1);
print (var2);
for(x in 1:a){
var3=var1+var2;
print(var3);
var1=var2;
var2=var3;
}
}
fibo(5)
fibo(13)
fibo(23)
fibo(32)
fibo(5)
fibo(13
fibo(13)
fibo(13)
fibo(23)
fibo(32)
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
setwd("~/Projects/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
View(training_set)
View(training_set)
regressor = lm(formula = Profit ~ R.D.Spend+Administration+Marketing.Spend+State,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+Administration+Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+Marketing.Spend,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
setwd("~/Projects/ML/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
lin_reg = lm(formula = Salary ~ .,
data = dataset)
summary(lin_reg)
dataset
dataset$Level2 = dataset$Level^2
dataset
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
dataset
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
y_predc= predict(lin_reg, data.frame(Level = 6.5))
y_pred
y_pred= predict(lin_reg, data.frame(Level = 6.5))
predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
